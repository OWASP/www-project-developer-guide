name: Release docs

on:
  push:
    # only for version x.x.x releases and release candidates
    tags:
      - v?.?.?*
  workflow_dispatch:

# for security reasons the github actions are pinned to specific release versions
jobs:
  create_artifacts:
    name: Create artifacts
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout markdown
        uses: actions/checkout@v4.1.1

      - name: Fix up markdown
        run: |
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_REF_NAME: ${GITHUB_REF_NAME}"
          pwd
          echo "rename draft to release"
          find draft -name "*.md" -exec sed -i "s|permalink: /draft/|permalink: /release/|" {} +
          find draft -name "*.md" -exec \
          sed -i "s/.*the latest contributions to the Developer Guide.*/\#\#\# Release version $GITHUB_REF_NAME/" {} +
          find draft -name "*.md" -exec sed -i "s/ (Draft)//gI" {} +
          echo "remove contributing footer"
          find draft -name "*.md" -exec sed -i "/The OWASP Developer Guide is a community effort/d" {} +
          find draft -name "*.md" -exec sed -i "/edit on GitHub/d" {} +
          find draft -name "*.md" -exec sed -i "/www-project-developer-guide\/issues\/new?labels/d" {} +
          find draft -name "*.md" -exec sed -i "/www-project-developer-guide\/blob\/main/d" {} +

      - name: Combine markdown
        run: |
          tail --lines=+14 -q $(find draft -name "*[0-9]*.md" | sort) > release.markdown
          mkdir -p publish

      - name: Export to pdf
        uses: docker://pandoc/latex:3.1
        with:
          args: >-
            --from=markdown
            --output=publish/OWASP_Developer_Guide.pdf
            --resource-path="release/assets/images:release/assets:release"
            release/title.pdf.yaml
            release.markdown

      - name: Export to epub
        uses: docker://pandoc/latex:3.1
        with:
          args: >-
            --from=markdown
            --output=publish/OWASP_Developer_Guide.epub
            --resource-path="release/assets/images:release/assets:release"
            release/title.yaml
            release.markdown

      - name: Store pdf and epub assets
        uses: actions/upload-artifact@v4.3.0
        with:
          name: export-docs
          path: publish

  create_release:
    name: Create pull request
    runs-on: ubuntu-24.04
    needs: create_artifacts

    steps:
      - name: Checkout markdown
        uses: actions/checkout@v4.1.1

      - name: Promote draft to release
        run: |
          echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
          echo "GITHUB_REF_NAME: ${GITHUB_REF_NAME}"
          cd draft && find . -name "*.md" ! -name "info.md" -exec cp '{}' '../release/{}' \;

      - name: Fix up markdown
        run: |
          pwd
          echo "rename draft to release"
          find release -name "*.md" -exec sed -i "s|permalink: /draft/|permalink: /release/|" {} +
          find release -name "*.md" -exec \
          sed -i "s/.*the latest contributions to the Developer Guide.*/\#\#\# Release version $GITHUB_REF_NAME/" {} +
          find release -name "*.md" -exec sed -i "s/ (Draft)//gI" {} +
          echo "revise page ordering"
          find release -name "*.md" -exec sed -i "/order: / s/$/0/" {} +
          echo "remove newpage tags"
          find release -name "*.md" -exec sed -i '/newpage/d' {} +
          echo "Remove multiple blank lines"
          find release -name "*.md" -exec sed -i ':a; /^\n*$/{ s/\n//; N;  ba};' {} +
          find release -name "*.md" -exec sed -i '${/^$/d;}' {} +

      - name: Retrieve pdfs and epubs
        uses: actions/download-artifact@v4.1.7
        with:
          name: export-docs

      - name: Update pdf and epub assets
        run: |
          pwd && ls -hal
          cp OWASP_Developer_Guide.pdf assets/exports/.
          cp OWASP_Developer_Guide.epub assets/exports/.

      - name: Create pull request
        uses: peter-evans/create-pull-request@v6.1.0
        with:
          title: |
            Release ${{ github.ref_name }} of Developer Guide
          body: |
            **Summary** :  
            Automatically generated pull-request for the latest release version  
            
            **Description for the changelog** :  
            release of version ${{ github.ref_name }}  
            
            **Other info** :  
            Please verify and then update the release by merging the pull request  
          commit-message: update to release version ${{ github.ref_name }}
          branch: update-release
          base: main
          labels: release
          draft: false
